// NOTE: the config is in HOCON format [1][2][3].
//       [1] https://en.wikipedia.org/wiki/HOCON
//       [2] https://www.playframework.com/documentation/2.6.x/ConfigFile
//       [3] https://github.com/typesafehub/config/blob/master/HOCON.md
//       By convention property names are lowercase.
//       By convention env. variable name are uppercase.

com.microsoft.azure.iotsolutions {

  iot-stream-analytics {

    messages {
      // Supported values (not case sensitive): "documentDb"
      storageType = "documentDb"
      documentDb {
        connString = ${PCS_STREAMANALYTICS_DOCUMENTDB_CONNSTRING}
        database = "pcs-iothub-stream"
        collection = "messages"
        // 2500 => unlimited space
        // see https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data
        RUs = 20000
      }
    }

    alarms {
      // Supported values (not case sensitive): "documentDb"
      storageType = "documentDb"
      documentDb {
        connString = ${PCS_STREAMANALYTICS_DOCUMENTDB_CONNSTRING}
        database = "pcs-iothub-stream"
        collection = "alarms"
        // 400 => minimum value
        // see https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data
        RUs = 2500
      }
    }
  }
}

http {
  port : ${PCS_STREAMANALYTICS_WEBSERVICE_PORT}
}

iothub-react {

  connection {
    // see: Endpoints => Messaging => Events => "Event Hub-compatible name"
    // e.g. "my-test-hub"
    hubName = ${PCS_IOTHUBREACT_HUB_NAME}
    // see: Endpoints => Messaging => Events => "Event Hub-compatible endpoint"
    // e.g. "iothub-ns-my-test-185521-d1bf252916.servicebus.windows.net"
    hubEndpoint = ${PCS_IOTHUBREACT_HUB_ENDPOINT}
    // see: Endpoints => Messaging => Events => Partitions
    // e.g. 4
    hubPartitions = ${PCS_IOTHUBREACT_HUB_PARTITIONS}
    // see: "IoT Hub" => your hub => "Shared access policies"
    accessConnString = ${PCS_IOTHUBREACT_ACCESS_CONNSTRING}
  }

  streaming {
    // see: "IoT Hub" >> your hub > "Messaging" >> Consumer groups
    // "$Default" is predefined and is the typical scenario
    consumerGroup = "$Default"
    // How many messages to retrieve on each pull, max is 999
    receiverBatchSize = 999
    // Value expressed as a duration, e.g. 3s, 3000ms, "3 seconds", etc.
    receiverTimeout = 5s
    // Whether to retrieve information about the partitions while streming events from IoT Hub
    retrieveRuntimeInfo = false
  }

  checkpointing {

    // Checkpoints frequency (best effort), for each IoT hub partition
    // Min: 1 second, Max: 1 minute
    frequency = 10s

    // How many messages to stream before saving the position, for each IoT hub
    // partition. Since the stream position is saved in the Source, before the
    // rest of the Graph (Flows/Sinks), this provides a mechanism to replay
    // buffered messages.
    // The value should be greater than receiverBatchSize
    countThreshold = 200

    // Store a position if its value is older than this amount of time, ignoring
    // the threshold. For instance when the telemetry stops, this will force to
    // write the last offset after some time.
    // Min: 1 second, Max: 1 hour. Value is rounded to seconds.
    timeThreshold = 30s

    storage {

      // Value expressed as a duration, e.g. 3s, 3000ms, "3 seconds", etc.
      rwTimeout = 15s

      // Supported types (not case sensitive): Cassandra, AzureBlob, CosmosDbSQL
      backendType = "AzureBlob"

      // If you use the same storage while processing multiple streams, you'll
      // want to use a distinct table/container/path in each job, to keep
      // state isolated
      namespace = "pcs-iothubreact-checkpoints"

      azureblob {
        lease = 15s
        useEmulator = false
        protocol = "https"
        account = ${PCS_IOTHUBREACT_AZUREBLOB_ACCOUNT}
        key = ${PCS_IOTHUBREACT_AZUREBLOB_KEY}
      }

      //cosmosdbsql {
      //  connString = ${PCS_STREAMANALYTICS_DOCUMENTDB_CONNSTRING}
      //}

      // Used while debugging
      //cassandra {
      //  cluster = "localhost:9042"
      //  replicationFactor = 1
      //  username = ""
      //  password = ""
      //}
    }
  }
}

play.crypto.secret = "change me e.g. use env var"

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  # See https://www.playframework.com/documentation/2.6.x/AllowedHostsFilter
  allowed = [ "." ]
}

akka {
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel : INFO
}
