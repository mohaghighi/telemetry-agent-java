#!/usr/bin/env bash -e

# Usage:
# Run the service in the local environment:  ./scripts/run
# Run the service inside a Docker container: ./scripts/run -s
# Run the service inside a Docker container: ./scripts/run --in-sandbox
# Run only the web service:                  ./scripts/run --webservice
# Run only the streaming agent:              ./scripts/run --stream
# Show how to use this script:               ./scripts/run -h
# Show how to use this script:               ./scripts/run --help

APP_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/"
source "$APP_HOME/scripts/.functions.sh"

# Folder where PCS sandboxes cache data. Reuse the same folder to speed up the
# sandbox and to save disk space.
# Use PCS_CACHE="$APP_HOME/.cache" to cache inside the project folder
PCS_CACHE="/tmp/azure/iotpcs/.cache"

STREAM_CLASS="com.microsoft.azure.iotsolutions.iotstreamanalytics.streamingAgent.Main"

help() {
    echo "Usage:"
    echo "  Run the service in the local environment:  ./scripts/run"
    echo "  Run the service inside a Docker container: ./scripts/run -s|--in-sandbox"
    echo "  Run only the web service:                  ./scripts/run --webservice"
    echo "  Run only the streaming agent:              ./scripts/run --stream"
    echo "  Show how to use this script:               ./scripts/run -h|--help"
}

prepare_for_run() {
    check_dependency_java
    cd $APP_HOME
    ./scripts/env-vars-check
    chmod +x sbt
}

run_all() {
    echo "Starting Telemetry Agent and web service..."
    ./sbt "run 9023" & \
        ./sbt "runMain $STREAM_CLASS" && \
        fg
}

run_webservice() {
    cd $APP_HOME

    check_dependency_java
    ./scripts/env-vars-check

    echo "Starting Telemetry Agent web service..."
    chmod +x sbt
    ./sbt "run 9023"
}

run_stream() {
    echo "Starting Telemetry Agent..."
    chmod +x sbt
    ./sbt "runMain $STREAM_CLASS"
}

setup_sandbox_cache() {
    mkdir -p $PCS_CACHE/sandbox/.ivy2
    mkdir -p $PCS_CACHE/sandbox/.sbt
    echo "Note: caching build files in $PCS_CACHE"
}

run_in_sandbox() {

    setup_sandbox_cache

    cd $APP_HOME

    # In Windows this script should use docker.exe, in which case
    # the parameters syntax is different, e.g. volumes path
    # (i.e. C:\path\path\... vs /c/path/path/...).
    set +e
    IS_WINDOWS=$(which cmd.exe)
    set -e
    if [[ -z "$IS_WINDOWS" ]]; then
        check_dependency_docker
        ./scripts/env-vars-check

        docker run -it \
            -p 9023:9023 \
            -e PCS_TELEMETRYAGENT_DOCUMENTDB_CONNSTRING \
            -e PCS_TELEMETRY_WEBSERVICE_URL \
            -e PCS_CONFIG_WEBSERVICE_URL \
            -e PCS_IOTHUBMANAGER_WEBSERVICE_URL \
            -e PCS_IOTHUBREACT_AZUREBLOB_ACCOUNT \
            -e PCS_IOTHUBREACT_AZUREBLOB_KEY \
            -e PCS_IOTHUBREACT_HUB_NAME \
            -e PCS_IOTHUBREACT_HUB_ENDPOINT \
            -e PCS_IOTHUBREACT_HUB_PARTITIONS \
            -e PCS_IOTHUBREACT_ACCESS_CONNSTRING \
            -v "$PCS_CACHE/sandbox/.ivy2:/root/.ivy2" \
            -v "$PCS_CACHE/sandbox/.sbt:/root/.sbt" \
            -v "$APP_HOME:/opt/code" \
            azureiotpcs/code-builder-java:1.0 /opt/code/scripts/run
    else
        # Note 'winpty' is required to provide a TTY to Docker
        echo "Launching cmd.exe /c winpty ..."
        cmd.exe /c "winpty .\scripts\run.cmd --in-sandbox"
    fi
}

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    help
elif [[ "$1" == "--in-sandbox" || "$1" == "-s" ]]; then
    run_in_sandbox
elif [[ "$1" == "" ]]; then
    prepare_for_run
    run_all
elif [[ "$1" == "--webservice" ]]; then
    prepare_for_run
    run_webservice
elif [[ "$1" == "--stream" ]]; then
    prepare_for_run
    run_stream
fi

set +e
