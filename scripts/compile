#!/usr/bin/env bash -e

# Usage:
# Compile the project in the local environment:  ./scripts/compile
# Compile the project inside a Docker container: ./scripts/compile -s
# Compile the project inside a Docker container: ./scripts/compile --in-sandbox

APP_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/"
source "$APP_HOME/scripts/.functions.sh"

# Folder where PCS sandboxes cache data. Reuse the same folder to speed up the
# sandbox and to save disk space.
# Use PCS_CACHE="$APP_HOME/.cache" to cache inside the project folder
PCS_CACHE="/tmp/azure/iotpcs/.cache"

sbt_compile() {
    cd $APP_HOME

    check_dependency_java
    ./scripts/env-vars-check

    chmod +x sbt
    ./sbt compile
}

setup_sandbox_cache() {
    mkdir -p $PCS_CACHE/sandbox/.ivy2
    mkdir -p $PCS_CACHE/sandbox/.sbt
    echo "Note: caching build files in $PCS_CACHE"
}

compile_in_sandbox() {

    setup_sandbox_cache

    cd $APP_HOME

    # In Windows this script should use docker.exe, in which case
    # the parameters syntax is different, e.g. volumes path
    # (i.e. C:\path\path\... vs /c/path/path/...).
    set +e
    IS_WINDOWS=$(which cmd.exe)
    set -e
    if [[ -z "$IS_WINDOWS" ]]; then
        check_dependency_docker
        ./scripts/env-vars-check

        docker run -it \
            -e "PCS_TELEMETRYAGENT_DOCUMENTDB_CONNSTRING=$PCS_TELEMETRYAGENT_DOCUMENTDB_CONNSTRING" \
            -e "PCS_TELEMETRY_WEBSERVICE_URL=$PCS_TELEMETRY_WEBSERVICE_URL" \
            -e "PCS_CONFIG_WEBSERVICE_URL=$PCS_CONFIG_WEBSERVICE_URL" \
            -e "PCS_IOTHUBMANAGER_WEBSERVICE_URL=$PCS_IOTHUBMANAGER_WEBSERVICE_URL" \
            -e "PCS_IOTHUBREACT_AZUREBLOB_ACCOUNT=$PCS_IOTHUBREACT_AZUREBLOB_ACCOUNT" \
            -e "PCS_IOTHUBREACT_AZUREBLOB_KEY=$PCS_IOTHUBREACT_AZUREBLOB_KEY" \
            -e "PCS_IOTHUBREACT_HUB_NAME=$PCS_IOTHUBREACT_HUB_NAME" \
            -e "PCS_IOTHUBREACT_HUB_ENDPOINT=$PCS_IOTHUBREACT_HUB_ENDPOINT" \
            -e "PCS_IOTHUBREACT_HUB_PARTITIONS=$PCS_IOTHUBREACT_HUB_PARTITIONS" \
            -e "PCS_IOTHUBREACT_ACCESS_CONNSTRING=$PCS_IOTHUBREACT_ACCESS_CONNSTRING" \
            -v "$PCS_CACHE/sandbox/.ivy2:/root/.ivy2" \
            -v "$PCS_CACHE/sandbox/.sbt:/root/.sbt" \
            -v "$APP_HOME:/opt/code" \
            azureiotpcs/code-builder-java:1.0 /opt/code/scripts/compile
    else
        # Note 'winpty' is required to provide a TTY to Docker
        echo "Launching cmd.exe /c winpty ..."
        cmd.exe /c "winpty .\scripts\compile.cmd --in-sandbox"
    fi
}

if [[ "$1" == "--in-sandbox" || "$1" == "-s" ]]; then
    compile_in_sandbox
else
    sbt_compile
fi

set +e
